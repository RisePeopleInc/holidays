# Canadian holiday definitions for the Ruby Holiday gem.
# Updated 2021-03-25.
#
# Notes:
#  - 'Family Day' in various provinces are only celebrated after certain years: http://www.timeanddate.com/holidays/canada/family-day
#  - Canada Bank Holidays source: https://www.rbcroyalbank.com/ach/2022_Canadian_Bank_Holiday_Schedule.pdf
---
months:
  0:
    - name: Good Friday
      regions: [ca, ca_bank_holidays]
      function: easter(year)
      function_modifier: -2
  1:
    - name: New Year's Day
      regions: [ca, ca_bank_holidays]
      mday: 1
  2:
    - name: Family Day
      regions: [ca_ab]
      wday: 1
      week: 3
      year_ranges:
        - after: 1990
    - name: Family Day
      regions: [ca_sk]
      wday: 1
      week: 3
      year_ranges:
        - after: 2007
    - name: Family Day
      regions: [ca_on]
      wday: 1
      week: 3
      year_ranges:
        - after: 2008
    - name: Family Day
      regions: [ca_bc]
      wday: 1
      week: 2
      year_ranges:
        - between: 2013..2018
    - name: Family Day
      regions: [ca_bc]
      wday: 1
      week: 3
      year_ranges:
        - after: 2019
    - name: Louis Riel Day
      regions: [ca_mb]
      wday: 1
      week: 3
    - name: Nova Scotia Heritage Day
      regions: [ca_ns]
      wday: 1
      week: 3
      year_ranges:
        - after: 2015
    - name: Islander Day
      regions: [ca_pe]
      wday: 1
      week: 3
  5:
    - name: Victoria Day
      regions:
        [
          ca_ab,
          ca_sk,
          ca_on,
          ca_bc,
          ca_mb,
          ca_ns,
          ca_pe,
          ca_yt,
          ca_nt,
          ca_nl,
          ca_nu,
          ca_nb,
          ca_yk,
          ca_bank_holidays,
        ]
      function: ca_victoria_day(year)
    - name: National Patriotes Day
      regions: [ca_qc]
      function: ca_victoria_day(year)
  6:
    - name: Fête Nationale
      regions: [ca_qc]
      mday: 24
      observed: to_monday_if_sunday(date)
    - name: National Aboriginal Day
      regions: [ca_nt]
      mday: 21
    - name: Discovery Day
      regions: [ca_nl]
      function: ca_nl_discovery_day(year)
  7:
    - name: Canada Day
      regions: [ca, ca_bank_holidays]
      mday: 1
      observed: to_monday_if_sunday(date)
    - name: Nunavut Day
      regions: [ca_nu]
      mday: 9
  8:
    - name: BC Day
      week: 1
      regions: [ca_bc]
      wday: 1
    - name: Saskatchewan Day
      week: 1
      regions: [ca_sk]
      wday: 1
    - name: Civic Holiday
      week: 1
      regions: [ca_nt, ca_nu, ca_pe, ca_ns, ca_mb]
      wday: 1
    - name: New Brunswick Day
      week: 1
      regions: [ca_nb]
      wday: 1
    - name: Discovery Day
      week: 3
      regions: [ca_yk, ca_yt]
      wday: 1
  9:
    - name: Labour Day
      week: 1
      regions: [ca]
      wday: 1
    - name: Truth and Reconciliation Day
      regions: [ca_bc, ca_bank_holidays]
      mday: 30
      observed: to_weekday_if_weekend(date)
  10:
    - name: Thanksgiving
      week: 2
      regions: [ca, ca_bank_holidays]
      wday: 1
  11:
    - name: Remembrance Day
      regions:
        [
          ca_ab,
          ca_sk,
          ca_bc,
          ca_pe,
          ca_nl,
          ca_nt,
          ca_nu,
          ca_nb,
          ca_yk,
          ca_yt,
          ca_bank_holidays,
        ]
      mday: 11
  12:
    - name: Christmas Day
      regions: [ca, ca_bank_holidays]
      mday: 25
    - name: Boxing Day
      regions: [ca_on, ca_bank_holidays]
      mday: 26
methods:
  ca_victoria_day:
    # Monday on or before May 24
    arguments: year
    source: |
      date = Date.civil(year,5,24)
      if date.wday > 1
        date -= (date.wday - 1)
      elsif date.wday == 0
        date -= 6
      end
      date
  ca_nl_discovery_day:
    # It is on the nearest Monday to June 24
    arguments: year
    source: |
      date = Date.civil(year,6,24)
      if date.wday <= 4
        date -= (date.wday - 1)
      else
        date += (8 - date.wday)
      end
      date
tests: |
  {
    Date.civil(2008, 1, 1) => 'New Year\'s Day',
    Date.civil(2021, 1, 1) => 'New Year\'s Day',
    Date.civil(2022, 1, 1) => 'New Year\'s Day',
    Date.civil(2023, 1, 1) => 'New Year\'s Day',
    Date.civil(2008, 3, 21) => 'Good Friday',
    Date.civil(2021, 4, 2) => 'Good Friday',
    Date.civil(2022, 4, 15) => 'Good Friday',
    Date.civil(2023, 4, 7) => 'Good Friday',
    Date.civil(2008, 7, 1) => 'Canada Day',
    Date.civil(2021, 7, 1) => 'Canada Day',
    Date.civil(2022, 7, 1) => 'Canada Day',
    Date.civil(2023, 7, 1) => 'Canada Day',
    Date.civil(2008, 9, 1) => 'Labour Day',
    Date.civil(2021, 9, 6) => 'Labour Day',
    Date.civil(2022, 9, 5) => 'Labour Day',
    Date.civil(2023, 9, 4) => 'Labour Day',
    Date.civil(2008, 10, 13) => 'Thanksgiving',
    Date.civil(2021, 10, 11) => 'Thanksgiving',
    Date.civil(2022, 10, 10) => 'Thanksgiving',
    Date.civil(2023, 10, 9) => 'Thanksgiving',
    Date.civil(2008, 12, 25) => 'Christmas Day',
    Date.civil(2021, 12, 25) => 'Christmas Day',
    Date.civil(2022, 12, 25) => 'Christmas Day',
    Date.civil(2023, 12, 25) => 'Christmas Day'
   }.each do |date, name|
    assert_equal name, (Holidays.on(date, :ca)[0] || {})[:name]
  end


  # Heritage Day in Yukon
  [
    Date.civil(2021, 2, 26),
    Date.civil(2022, 2, 25),
    Date.civil(2023, 2, 24),
    Date.civil(2024, 2, 23)
  ].each do |date|
    assert_equal 'Heritage Day', Holidays.on(date, :ca_yt)[0][:name]
  end

  # Discovery Day in Newfoundland and Labrador
  [
    Date.civil(2021, 6, 21),
    Date.civil(2022, 6, 27),
    Date.civil(2023, 6, 26),
    Date.civil(2024, 6, 24)
  ].each do |date|
    assert_equal 'Discovery Day', Holidays.on(date, :ca_nl)[0][:name]
  end

  # Family Day in Alberta - Should only be active on 1990 or later
  [
      Date.civil(1990, 2, 19),
    Date.civil(2013, 2, 18),
    Date.civil(2014, 2, 17),
    Date.civil(2023, 2, 20),
    Date.civil(2044, 2, 15)
  ].each do |date|
    assert_equal 'Family Day', Holidays.on(date, :ca_ab)[0][:name]
  end

  # Family Day in Alberta - should not be active before 1990
  [
    Date.civil(1970,2,16),
    Date.civil(1988,2,15),
    Date.civil(1989,2,20)
  ].each do |date|
    assert_equal [], Holidays.on(date, :ca_ab)
  end

  # Family Day in Saskatchewan - Should only be active on 2007 or later
  [
    Date.civil(2007,2,19),
    Date.civil(2013,2,18),
    Date.civil(2014,2,17),
    Date.civil(2022,2,21),
    Date.civil(2023,2,20),
    Date.civil(2044,2,15)
  ].each do |date|
    assert_equal 'Family Day', Holidays.on(date, :ca_sk)[0][:name]
  end

  # Family Day in Saskatchewan - should not be active before 2007
  [
    Date.civil(1970,2,16),
    Date.civil(1988,2,15),
    Date.civil(1989,2,20),
    Date.civil(2006,2,20)
  ].each do |date|
    assert_equal [], Holidays.on(date, :ca_sk)
  end

  # Family Day in Ontario - Should only be active on 2008 or later
  [
    Date.civil(2008,2,18),
    Date.civil(2013,2,18),
    Date.civil(2014,2,17),
    Date.civil(2044,2,15),
    Date.civil(2022,2,21),
    Date.civil(2023,2,20)
  ].each do |date|
    assert_equal 'Family Day', Holidays.on(date, :ca_on)[0][:name]
  end

  # Family Day in Ontario - should not be active before 2008
  [
    Date.civil(1970,2,16),
    Date.civil(1988,2,15),
    Date.civil(1989,2,20),
    Date.civil(2006,2,20),
    Date.civil(2007,2,19)
  ].each do |date|
    assert_equal [], Holidays.on(date, :ca_on)
  end

  # Family Day in BC - Should only be active on 2013 to 2018
  [
    Date.civil(2013,2,11),
    Date.civil(2014,2,10)
  ].each do |date|
    assert_equal 'Family Day', Holidays.on(date, :ca_bc)[0][:name]
  end


  # Family Day in BC - Should only be active on 2019 or later
  [
    Date.civil(2022,2,21),
    Date.civil(2023,2,20),
    Date.civil(2044,2,15)
  ].each do |date|
    assert_equal 'Family Day', Holidays.on(date, :ca_bc)[0][:name]
  end

  # Family Day in BC - should not be active before 2013
  [
    Date.civil(2000,2,14),
    Date.civil(2011,2,14),
    Date.civil(2012,2,13)
  ].each do |date|
    assert_equal [], Holidays.on(date, :ca_bc)
  end

  # Nova Scotia Heritage Day - should only be active on 2015 and later
  [
    Date.civil(2015,2,16),
    Date.civil(2016,2,15),
    Date.civil(2017,2,20),
    Date.civil(2022,2,21),
    Date.civil(2023,2,20),
    Date.civil(2044,2,15)
  ].each do |date|
    assert_equal 'Nova Scotia Heritage Day', Holidays.on(date, :ca_ns)[0][:name]
  end

  # Nova Scotia Heritage Day - should not be active before 2015
  [
    Date.civil(2000,2,21),
    Date.civil(2012,2,20),
    Date.civil(2013,2,18),
    Date.civil(2014,2,17)
  ].each do |date|
    assert_equal [], Holidays.on(date, :ca_ns)
  end

  # Manitoba Louis Riel Day
  [
    Date.civil(2022,2,21),
    Date.civil(2023,2,20)
  ].each do |date|
    assert_equal 'Louis Riel Day', Holidays.on(date, :ca_mb)[0][:name]
  end

  # Islander Day in PE
  [
    Date.civil(2013,2,18),
    Date.civil(2014,2,17),
    Date.civil(2022,2,21),
    Date.civil(2023,2,20)
  ].each do |date|
    assert_equal 'Islander Day', Holidays.on(date, :ca_pe)[0][:name]
  end

  # National Aboriginal Day in NT
  [
    Date.civil(2022,6,21),
    Date.civil(2023,6,21)
  ].each do |date|
    assert_equal 'National Aboriginal Day', Holidays.on(date, :ca_nt)[0][:name]
  end

  # Fête Nationale in QC
  [
    Date.civil(2022,6,24),
    Date.civil(2023,6,24)
  ].each do |date|
    assert_equal 'Fête Nationale', Holidays.on(date, :ca_qc)[0][:name]
  end

  # Nunavut Day in NU
  [
    Date.civil(2022,7,9),
    Date.civil(2023,7,9)
  ].each do |date|
    assert_equal 'Nunavut Day', Holidays.on(date, :ca_nu)[0][:name]
  end

  # Discovery Day in Yukon
  [
    Date.civil(2022, 8, 15),
    Date.civil(2023, 8, 21)
  ].each do |date|
    assert_equal 'Discovery Day', Holidays.on(date, [:ca_yk, :ca_yt])[0][:name]
  end

  # Victoria Day in all Canadian provinces
  # except (QC)
  %i[
    ca_ab
    ca_sk
    ca_on
    ca_bc
    ca_mb
    ca_ns
    ca_pe
    ca_yt
    ca_nt
    ca_nl
    ca_nu
    ca_nb
    ca_yk
  ].each do |province|
    assert_equal "Victoria Day", Holidays.on(Date.civil(2008, 5, 19) , province)[0][:name]
    assert_equal "Victoria Day", Holidays.on(Date.civil(2021, 5, 24) , province)[0][:name]
    assert_equal "Victoria Day", Holidays.on(Date.civil(2023, 5, 22) , province)[0][:name]
  end

  # First Monday in August
  [
    Date.civil(2013,8,5),
    Date.civil(2014,8,4),
    Date.civil(2015,8,3),
    Date.civil(2022,8,1),
    Date.civil(2023,8,7)
  ].each do |date|
    { ca_bc: 'BC Day',
        ca_sk: 'Saskatchewan Day',
        ca_nt: 'Civic Holiday',
        ca_nu: 'Civic Holiday',
        ca_pe: 'Civic Holiday',
        ca_ns: 'Civic Holiday',
        ca_mb: 'Civic Holiday',
        ca_nb: 'New Brunswick Day' }.each do |region, name|
      assert_equal name, Holidays.on(date, region)[0][:name]
    end
  end

  # Remembrance Day in all Canadian provinces
  # except (QC, NS, MB, ON)
  %i[
    ca_ab
    ca_sk
    ca_bc
    ca_pe
    ca_nl
    ca_nt
    ca_nu
    ca_nb
    ca_yk
    ca_yt
  ].each do |province|
    assert_equal "Remembrance Day", Holidays.on(Date.civil(2016,11,11), province)[0][:name]
  end

  assert_equal "Boxing Day", Holidays.on(Date.civil(2008, 12, 26), :ca_on)[0][:name]

  {Date.civil(2022,1,1) => 'New Year\'s Day',
   Date.civil(2022,4,15) => 'Good Friday',
   Date.civil(2022,5,23) => 'Victoria Day',
   Date.civil(2022,7,1) => 'Canada Day',
   Date.civil(2022,9,30) => 'Truth and Reconciliation Day',
   Date.civil(2022,10,10) => 'Thanksgiving',
   Date.civil(2022,11,11) => 'Remembrance Day',
   Date.civil(2022,12,25) => 'Christmas Day',
   Date.civil(2022,12,26) => 'Boxing Day'}.each do |date, name|
    assert_equal name, Holidays.on(date, :ca_bank_holidays)[0][:name]
  end

  assert_equal "Truth and Reconciliation Day", Date.civil(2023,9,29).holidays(:ca_bank_holidays, :observed)[0][:name]
  assert_equal "Truth and Reconciliation Day", Date.civil(2023,9,30).holidays(:ca_bank_holidays)[0][:name]

  # Truth and Reconciliation Day in BC
  [
    Date.civil(2023,9,30),
    Date.civil(2024,9,30)
  ].each do |date|
    assert_equal 'Truth and Reconciliation Day', Holidays.on(date, :ca_bc)[0][:name]
  end
